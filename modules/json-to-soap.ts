// This code will be internal to the Zuplo runtime
import{ZuploContext as a,ZuploRequest as b}from"@zuplo/runtime";type c={template:{module:any,export:string}};async function d(a,b,c){const d=/\{\{(header|custom|param|query):([^}]+)\}\}|\{\{bodyAsXml\}\}/g;let e;try{e=await b.json()}catch(a){e=null}const f=new URL(b.url),g=Object.fromEntries(f.searchParams),h=(a,d,f)=>{switch(d){case"header":return b.headers.get(f)||a;case"custom":return c.custom[f]!==void 0?c.custom[f]:a;case"param":return b.params&&b.params[f]!==void 0?b.params[f]:a;case"query":return g[f]!==void 0?g[f]:a;default:return a==="{{bodyAsXml}}"&&e?i(e):a}};return a.replace(d,h)}function i(a,b="root"){let c="";for(const d in a)if(a.hasOwnProperty(d)){const b=a[d];c+=typeof b=="object"&&b!==null?`<${d}>${i(b,d)}</${d}>`:`<${d}>${j(b)}</${d}>`}return c}function j(a){return a.toString().replace(/[<>&'"]/g,a=>{switch(a){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case"'":return"&apos;";case'"':return"&quot;"}})}export default async function k(e,f,g,h){const i=g.template?.module[g.template?.export];if(typeof i!="string")throw new Error("Template not found or was not a string ");const j=await d(i,e,f);f.log.info({body:j});const k=new Headers(e.headers);return k.set("content-type","text/xml; charset=utf-8"),new Request(e.url,{method:"POST",headers:k,body:j})}